# ####

# .#.
# ###
# .#.

# ..#
# ..#
# ###

# #
# #
# #
# #

# ##
# ##

full_input = """>>>><<>>>><<><<<>>><<<>><<>>><<>>>><<<>>><<<>><<<<>>>><<<<>>>><<<>>>><<<<><><>>><<<<>><>>>><<<><<<>><<<<><>><<><<<<>>><>>>><>><>><<><<<><<<<>>><<<>><<<<><<<<>><<<<>><<>><<><>><>>>><><<<><>>><>>><<<><<<<>><<>>>><<<><<<>>><<<<>>><<<>><<>><<<>>><<<>><<<<>>><>><<<<>>>><<<<>>><>>>><>><>>>><<<<><>>><<<<>>><><<<<><<<><>>><<>>>><<<<>>>><<<>><<<<>>><><<>>><<><<><<>>><<<<>>><<<<>>><<<<><<<><<<><<>><<>><><<<><<>>>><<>><<>>>><<<<><<<<>><<<>>>><<>>>><<<<>>><<>><<><<<>>>><<><<>>><<<>><>>><>><<<<>>>><>><><<<<>>><>>><<>>>><<<><>>><>>><<<>><<>>>><<><<>>>><>><>>><<<>><<<>><<<>>><<<<><<<<>>><<>>><<>>>><>><>><<<>>>><<<<>>><<><<>><<>><<<<>>><<>>>><<>>><<<<>>>><>><<<>><>>><<>><<>>>><>><<>>><<<<><<<>>><<<<>>><>>>><<<><<<>>><<<>><<<>><<<<>>><>>><><>><>><>><<<><>>><<<>>><><<<<><<<>>>><><>>>><<>>>><<<>>><<<<>>><<>>>><<<><<>>>><>>><<<><>>>><<<<>><<<><<<>>><<<><<><<>>><<<>><<<><<<<>>><<>><<>>><>><><<<><<><>>><<<>><<>><<<><<<>><<<<><>><<<>>>><<<<>>>><>><<<<>>>><<<<>>><<<><<>><<>><<<><<<<><<<>>>><<><<<>>><<<<><<<><<<<>><<<<><>><<<<>>>><>><<<<><<<<>>><<<<>><<<<>>><<<<>><<>>>><<><<<><>>>><<<<><<<>>>><<>>>><<>>><<<<>><><<<>>>><<>>><>>><<<<>><<><<>>><>>>><>><<<>>>><<<<>>>><<<<>>>><<<>>><><<<><>><<<>>><<<><<<>>>><<<<><<<>>><<<<><<><>>><<<>><<<>>><<<<>>><<<<><<<>><>>>><<<>><>><<<<>><<>><>>>><>>>><<>><<>>>><<<<>>><<<>>><<><<<>>><<>><<<<>>>><<<>><<<<>><><>>><<<<>>><<<>>>><><>>>><<<<>>><<<<>><<<>>><>>><<<><><<>>><>>><<<<>><<<>>>><><<<<>><<>>><<<><<<<><<<><<<><>><<<>>><<<><<>><>><<<<>><<<<>>><<>><<<<>><<><<><<<<>>><<<>><<<>>>><>>><<>><<<<>><<<<>>><<<><>>>><<<>>><<<<><<<<>>>><<><<<<><<<>>>><<>>><>><<>><<<<>>>><><<<<>><<<>><<<><>>><<<<>>><<>>>><><<>>>><<<<>>><<<>>>><<<><<<<>>><<<<>>>><<<><<<>>>><><>><>><<>><<<>>><>>>><>><<>>><<>>>><<<>>>><<<>>>><<<>>>><<<<>>><>>>><<<><<<<>>>><>><<<><<<>>><<>>><<<<>><<<<>>>><>>>><<>>><<><>><>>><<<>>>><<<>>><<<>><<<>>>><<>><<<<>>><<<>>><<<<>><<<<>>><<>><<<>><<<>>><<>>>><>><<>><<<<>>>><<>>>><><<<>>><><><<>>>><<<>><><<><<<<>>>><<<<>><<<<>><><<<<>>>><><<><>>>><>><><>>>><<<<>>><<<<><<>><<<<><<><>>>><<>><>><>>><<><<><<>><<>>>><<<<>>>><>><<<<>>>><<<>><<<><<<>><<<<>><>><<>>><>><>>><<<>>><<<>><<<<>>><<>>><<<<>>><<><>>>><<<<><<<><><<>>><<<<>><<<<>>><<<<>>><<>>><<<<><>>><>>>><<<<>><<<>>>><><<<<><>>><<<<>>><<<>>>><<<>>><<<<>>>><<<<><>><>>><<>>><<<><<<><<<><<<><<>>><<>><<>><<>>>><><<<>>><<><<<<><<<<>><<<>>>><<>><<>>><<<<>><<<>><<<<>>>><<<<>>>><>><<><<<>><<<>>><<>><>>><<>>>><<<>>><><<>>>><<>>>><<<>>>><<<<>>><<>>><<<<><<<<><>>><><<<<>><<<<>>><<>>><>>><<>>>><<<<>><<<><<>><>>>><<<>>><<<<>><<<<><<<<>>>><<<><<<>><<>>>><<<>><>>>><<<>>>><<<<>>>><<<><<<><<<<>>><<>>><<<>>>><<>>>><<<>>><<><>>>><<<>><>>>><<<<><<<<>>><>>><>>>><><<<>>>><<>>><>>><<<<>><<>>><<<><<<<>><<<>>>><<<<><<<<>>>><<<<>><>>><<>>>><<<>>><>>>><>>><<<<>>><<<>>><<<><<>>><>>>><<>>><<>>><<>>><<<>>><<<<>>><>><<<>>><<<<>>><<<>><<<>><<><>><<>><<<<>>><<<>>>><<>>><<>>><<>>><<>><<<>>><<<<>>><<<<>>><<><<<>>><<>><>><<<<>>><>>><<<>>><<<><<<<>>><<<>>><>>>><<<>><<<<><>>><<<>>><<<<>><<<>>>><<>>>><><<<<>>>><<<<>>>><>>><<<>>><<<<><>><<>>>><><>><<<<>>><<<<>>><<>>>><<<<>>><<<>>>><>><<<<>>>><<><<><<<<>><<<<>><<<<>><<<<>>><<>><<<<><<><<>><<<>>>><<<>>>><>>><<>>><>>>><<<<><><<><>>>><<>>>><>>>><><<><<<>><<<><<>>><<><<><<<>>>><<>>>><<<<>>>><>>>><<>>>><<>>><<<><<<<>><<<<><>>><<<<><<>>>><<>>><<>>>><<<<>>><<<>>><<>>><<<>>><<<>>>><<<<><><>>><<<<>>>><<>><<<<>><>><<>>><<<<>>><>><<>>>><<<>>>><<<<><<<>>><<<<>>><>><<<<>>><<<<>>><<<>><<<<>>><<<>>><<>><<<>>>><<<>>><><<<><<<><<<<>><<><<<>>><<<<>>><<<<><<<<><<<<>><<<>>>><<><<>><<<><><<>>>><<<>>><<>>><<<<>>><<><>>><>>><<<><<<<>>><<<<><<>>><<<<>><<>>><<<<>>><><<<>>><<<><>><<<<>>>><<<<>><<<<>>>><<>>><<<<>>>><<<><<<<><<<>>>><<<<>>>><><<<>><<<>>>><<><<<<>><<<>>><><<>>>><<>>>><<<<><>><<<>>>><><<<>>>><><<<><<<>><>>>><<<>><>>>><><>>><<<><<>>>><<>>>><<><>><<>><<>>>><<<<>>>><<<>><<<>>><<<>>>><<>>><<<>>>><<<<>>><<<<>><<><>><<<>>>><<<<>>>><>>>><<<<><<>>>><<<<>>><>>><>>>><<<>>>><<<>>><<<>>>><<<>>><<<<><><<<>>>><>><<<><>>>><<<><<<<><<<>>><><<>>><<<<>><<<>>><<<><<<>>>><<<<><<<<><<<><<<>><<<<>>>><<>><><<<>>><<<<>>>><<<>>><<>><<<>><<<>>><<<><<<<><<<<>>><<>>><><>>>><<<>>>><<>>>><<<<><>>><>>>><<<>>>><<<<>><>>>><<>><<>>>><<<<>>>><>>><<><<<<>>><<<><>><>><<<><<<<>><<<>><><<<<>><>>>><<>><<<>>><>>><<>><<>>><><<<<><<<<>><<<<>>>><<>>><<>><><<<<>>>><<><<<>>>><<<<><<<<>><<>><<<>><>><>><<<>><<<<><>><<<<><<>>>><<<<><>><>><>>>><>><<<<><>><>>>><<<>>>><<<<>><<<<><<<<>>>><>>><<<><>><<>>>><<>>>><<<>><<>><<<<>>><><<<><<<<><<<<>>><<>>>><>>><>>>><<>>>><<<><<<<>><<>>>><<>>>><<<>>><<><<><<>>>><<>>><<<><<<>>>><<<><>>><<>><><<>><<<>>>><<><<<<>><<><<<>><>>><<<>>>><<<<>>>><<<>>>><<<>><<>>>><<><>>>><<<><<>>><<<<>><<<><<<>>><<>>><>>><<>>>><<>><<><>><<<<>>><><><<<<>>>><<>><<<>>>><>>><<<>>><<<<><<>>><>><<<<>>>><>>><<<<>>>><<<<>>>><<<<>>>><<<>><>><<<>>>><<<><<<<>>>><<><<>><<<<>>><<>>>><<<<><<<<>>>><<<<><<<>>><<<>>>><<<<>>>><>>>><>>>><<<>>><<<>>><<<<>>><<<>><<<>>>><<>><<>>>><>>>><>>>><<<>>><>>>><>>><<<<>>><<<<>>>><>>><>>><>><>>><<<>>><<<<>>><<<<><>><<<><>>><<>><<<>>>><<<>><><<<>>><<<><<>><>>>><<<>>><><<><>>><<<<>><<<<><<<>>>><<<>>><><<<<>>><<<><<><<<>>><<><<>>>><<<>>>><<><<<>>>><>>><<>><<<><<<>>>><<<<>><>>>><<>>><<<<>>><<><>>>><<<<>>><<<>>><<><<<<>>><<<<>>><<<<>>>><<<>>>><>>><<<>>><<>><<<>>>><<<><><<<<><<<<>>>><<>>><>>><<<<><<<>><<>>>><><<<><<>>><<<<>>><<>>><<<<><<<>>><<<>>>><>>><>>><<><><<>><<>>><<<<>>><<>><<<>>>><>>>><>><<><<<>>><<><<<<>>>><<>>>><<<<>><<>>><<<<><<<<>>><<>>><<<<><><>>>><<<>>><<<<>>><>>>><<<>><<<>>>><<<<><<<>>>><<><<>>>><<>><<<<>><<<>>><<<>>>><<<<><<>><>>><<<>><<<>>>><<<<>>><<>><<<<>><>>><<>>><<<>>><>><<<>>>><<>>>><<<<>>><<>>><>>><>><>>>><>>>><<>>>><>>><<<><>>>><<<<>>><<<<>>><<<<>>><<<>>>><<>>>><>>><<<>>><<<<>><<<<>><<>>>><<<<><<>>><<<<><<<><<<><<>>>><<<>><<><<>>><<<>>><<>>><<>>>><>>>><><<<<><>>><<>>><<><<<><<<>>><<<>>>><<<>>><>><>>>><<<>>>><<<>>>><>><>>>><<<<>>><<<>>><<<<>><<>><<>>><<<<>>>><<<>>><<><<<<>><>>>><>><<>>>><>>><>>><><<<<>>><<<<>>><<<<><<<<>>>><<<<><<>>>><<<<>>>><<<<>>><<<>>><<>><<>><<<>>><>>>><>>>><<<<>>>><<<>>>><<<<>>>><<<>><<<>>><<<>><<<<>><<>>><<>>><<<<>><<<<><<<<>>>><<<<>>>><<>><<<>>>><><>>><<><<>><<<>>><>>><<>>>><<><>>><<><<>>><<>>>><><>>>><<<<>>>><<<><<>><<>>><<<<>>>><<<<>><<<<>><<>><<><<>><<<>>>><<<<><><<<<>>>><><<>>>><>>><>><<<<>><<<><<<>><<>>>><><>>>><<>><<>>><<<<><<<>><<<<>>><<<<>><<<<>><<<>><<<<><<<>>><<>>><<<<>>>><>>>><<>><<>>>><<>>>><<>>><>>><<<><><<<><<<>><><>>>><<<<>>><<<><<<>><<><<<<><<<<><<><<<<>>>><>><<<<><<>>>><>>>><<<>>><>>><><<<<>><<<>><<>>>><<<<><>>>><<<>>>><<<>><>>>><<>>>><<<>>><<>>><<<>><<<><<<<>>><><<>>>><<<>>><<>>>><>>>><>>><<<>>>><<<>><>><<<<>>><<<>>><><<<><<>><<<>>><<<<><><<<<>>>><<>>>><<<>><<<>><<>>><>><<<>><<<>>><<<><<<>><<>><<>>><<<<>>><<><<<><<>><<<>>><>>><<>><<>><<<<>>>><<><<<<>>><<>>><>>><<><>>>><<<<>><<>>>><>><<<<>>><<><<<>>>><<<><>>>><<<>>><<<><<<>><<<>><<<<>><><<<<>>><>>><<>>>><<<>>><<<>>>><<<<>>><<<<>>>><<<>>>><>>><<<<>>>><>>><<<<><<>>><<>><<<<>><><<>><<<<>><<<>><<><<>>>><><<<<>>><<><<><<<>>>><<<>>>><<><<<>>>><<<><>>>><>><<><<<<>>><>><<<><>><<<>>>><<<><<><<<>>>><<>>><<<<><<><<<>><<<><<<<>>>><<<>>><<<<><<<>><<<>>>><>>>><<<<>>>><<<>>><<<<>>>><<<>><<>><<>><>>>><<<<>><<<><>><<<<><<<<><<>><<<>>><<>>>><<><>>>><<<<>><<><<<>>><<<><<<<>>>><<<>>>><<<>>><<<>>><<<<>>><<<>>><<>><<<>>><><><<<>><>>>><<<<>><<>>><<><<>>><<<<>><<>><><<<<>>><<>>>><<><>><<>>><<><<<>>><<>>>><><>><<><<>><<><<<<>>>><<>>>><>>>><<<<>>>><>><>><<<>>>><<>>>><<><>>>><<<<>>>><<<<>>><<<<><<<<>><<>>>><<<><<<>><<<<><<<<>><<<><<>>>><>><<>>>><<<>>>><<>>><<<<>><<<<><<>>>><>>>><>><><<>><<><<<><<>><<<>>><<<>>>><<<<>>><<<<>>>><<<><>>><<>><<<><<<<><<>>><<<<><<<><<<>><<>>>><><<><<<<>><>><<<>><<<<>>><<<<>>><>>><<<><<<>><<>>><<<>>><<<>><<<<>>>><<<>><<<>><<<<>>><>>>><>><<>><<>><<<>><<>>>><<<<><>><<<>>>><<<<>><<<<><<<<>>><<<<>>><<<<>>><<>><<<><<<>>><<<>><<>>><<>>><<>>>><<>>><<>><><><<<>><<<>>><<<><<>>><>><<><<<<>>>><<<>><>>><<>><>>><<<>>><<<>>><<<>>><>><<>><<>>><><<<>><<>><<>>>><<<<><>>>><>>>><<<<>>><<>>><<<>>><><>><<<<><>><<<>>>><<<>>>><<<<><<<>>><>><<>>>><<<><>>>><<<>><<<>>><<<<><<><<<>>><<><>>>><<<>><<<<>>>><<<<><<<<>>>><<><<<>><<<>>>><>>><<><<>><<>>><>>><<<><<<<>>>><<<<><<<<>><>><>>>><<<>>>><<<><<>>>><><<<<>><<<>><<><<<><<<>>><<<>><<<>>>><<>>><<<<>><<>>><>><<<<>>>><<<<>><>><<>>>><<>>>><<<>>><>>>><<<><<<<>>>><<><<>>><<<<>><<<>>><<<>><>><<<>>><<>>><<><>>>><>>><><>>><<>><>>><<>><<<<>><>><<>><><<<>>>><<>>><<>>>><<<>><<>><<<<>><<<><<<<>><<<<>><>>><<>>>><<<<><<>>><<<><>><<<><<<>>>><<<<>>><>><<<<>>>><<<<>>><<<<>>><>>>><<>>>><<<<>>><<><<><>><><>>>><<<<>><<>>><<><<<>><>>><>>><<<<>>>><<>>><<<><<>>><<<>><<<<><><><<><<<><>>><>>>><>>><>>><<>>>><<>>><<<<>>>><<><>><<>>>><<<><<<>>>><<<>>>><<<<>>>><<<<><<<>>><<<<>>><<<>>><>><<<>>><<>>><<<>>>><>>>><<>><<>>><>><<<<>>>><<<<>><>>>><><<<>>>><>>><<>>>><<<>><<<<><>>>><<<<>><<>><>>><><<<<>>>><<<<>><<<>><>>>><<<<>>>><<<><<<><<<<>>><>><><<<>>>><<>>><<<>><<>>><<>><<>><<<<><<<><><>><>>><<<<>>>><<>>>><<<>><>>>><<<<><>><<>>><<>>>><<>>>><<<<>>><<<><<>><<><>>><>><<>><<<<>>>><<<>>>><<<>>><<>>>><<<<><><<>>>><<<><<>>>><<<><<<<>><<<<>>><<>>><>><<<<><<<>><<<>>>><<<<>>><<<<>><<<>>>><<<<>>>><<<>><>>><>><<>>><<>>>><<<<>><<><<><<>>><>>><<<>>>><<<><<<>><<<>><<<>><<>><<<>>>><<<>>>><>>>><>><<<<>>>><<><<<<>>><>>>><<>>><<<>>>><<<>>><<<<>>>><>>><><<<<>>><<<<>>>><><<<>><><>><<<><<<>>>><<>>>><<<<>>>><>>>><<>>><<<<>><<<><<>>><<<<>><<<<>><>><<<<>>>><<<>>><<<<>>>><<<>>><<>><<<>><<>>><<>>>><<<>>><>>>><<<<>><<<<>>>><>><<<>><<<<>><<>><<<>>>><<<>>><<<>>>><<<<>><<<><><>>><<<<><<<>>>><<<>>><<<<>>>><<<>>>><<>><<><<<>>><<>><><<<>>>><<>><<<>>>><<<>>><<<<><<>>>><<<<><><<<><><<<<>><<><<<><<<>><<>><<>><<>><>>><>>>><><><<<>><<>><<<>><<<<>>><<>>>><<<<>>><<<>><>>><<<>><>>>><<<>>><<<>><<<<>>><<>>>><>>>><<>>><<<><<<>>><<<<>>>><<<<><<<>>>><<>><<<><<><><>>>><<<<>>><>>><<<<>><<<>><<<>>>><<<<>>>><<<>><<<<>>>><<<>>><>>><<<><<<<>>><<<<>><<<>>><<<>><<<<>>>><<<>>><<>>><>>>><<<<>><<>>>><<<<>>>><<>><<>><<<<>>>><<<>>><<<><<<>>>><<<<>>>><<<>>>><<>>>><<<<>>><<>>><<<><<<<>>>><>>>><<>>><<>>><<<<>><<<>><><<>>><>>>><<>>><<<<>>><>>><<<<>>><<>>><<<<>><<>>>><<<>>>><>><<<>><<<<>>>><><<<<>>>><<<>>><>>>><<>><<<>>><<><<<<>><<>>>><>>>><<>>><<>>>><<<>>><>>>><>>>><>>>><<<<>><<<>><<<<>><<<>>>><>>><<<<>><><<<<>>>><<>>>><<>><>><<>>><<>><>>>"""

test_input = """>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"""

class Rocktris:
    DEFAULT_SHAPES = [
        [[True, True, True, True]],
        
        [[False, True, False],
         [True, True, True],
         [False, True, False]],
         
        [[False, False, True],
         [False, False, True],
         [True, True, True]],
          
        [[True],
         [True],
         [True],
         [True]],
         
        [[True, True],
         [True, True]]
        ]
    
    STARTING_HEIGHT=1000
    
    ROCK = '#'
    EMPTY = '.'
    
    def __init__(self, jets, width=7, num_drops=2022, shapes=None):
        self.jets = jets
        self.jet_index = 0
        self.width = width
        self.num_drops = num_drops
        if shapes is None:
            self.shapes = self.DEFAULT_SHAPES
        self.shape_index = 0
        self._initialize_grid()
        self.top = 0
        self.floor = self._get_floor()
        self.current_shape = None
        self.bottom_left = None
        
    def __str__(self):
        return self.grid_string(0, self.top+7)
        
    def _initialize_grid(self):
        self.grid = [[False for _ in range(self.width)] for _ in range(self.STARTING_HEIGHT)]
    
    # Returns a list of length self.width, with each space indicating how far below
    # self.top the first rock is found in the grid
    def _get_floor(self):
        floor = []
        for x in range(self.width):
            y = self.top
            while y > 0 and not self.grid[y][x]:
                y -= 1
            floor.append(self.top - y)
        return tuple(floor)
    
    def grid_string(self, start, end):
        result = ''
        for i in range(start, end):
            line = self.grid[i]
            line_str = ''
            for space in line:
                line_str += self.ROCK if space else self.EMPTY
                line_str += ' '
            result = line_str + '\n' + result
        return result
        
    def reset(self):
        self._initialize_grid()
        self.top = 0
        self.jet_index = 0
        self.shape_index = 0
        self.floor = self._get_floor()
        self.current_shape = None
        self.bottom_left = None
    
    # These three functions have very similar structures. Could/should that structures
    # be abstracted out into its own function?
    def remove_shape(self):
        x,y = self.bottom_left
        for dy, row in enumerate(reversed(self.current_shape)):
            for dx, space in enumerate(row):
                if space:
                    self.grid[y+dy][x+dx] = False
                    
    def try_shape(self, sx, sy):
        if (sx < 0 or
            sx + len(self.current_shape[0]) > self.width or
            sy < 0 or
            sy + len(self.current_shape) > len(self.grid)):
                return False
        for dy, row in enumerate(reversed(self.current_shape)):
            for dx, space in enumerate(row):
                if space and self.grid[sy+dy][sx+dx]:
                    return False
        return True
                    
    def place_shape(self, sx, sy):
        self.bottom_left = (sx, sy)
        for dy, row in enumerate(reversed(self.current_shape)):
            for dx, space in enumerate(row):
                if space:
                    self.grid[sy+dy][sx+dx] = True
        
    def move_shape(self, dx, dy):
        x, y = self.bottom_left
        # First check to make sure the coordinates are valid
        newx = x + dx
        newy = y + dy
        self.remove_shape()
        if self.try_shape(newx, newy):
            self.place_shape(newx, newy)
            return True
        else:
            self.place_shape(x, y)
            return False
        
    def spawn_shape(self, shape):
        self.current_shape = shape
        self.bottom_left = (2, self.top+3)
        # Check if we need to extend the grid
        if self.top + 3 + len(shape) >= len(self.grid):
            for _ in range(self.STARTING_HEIGHT):
                self.grid.append([False for _ in range(self.width)])
        self.place_shape(*self.bottom_left)
            
    def drop_shapes(self, num_drops=None):
        if num_drops is None:
            num_drops = self.num_drops
        for i in range(num_drops):
            self.spawn_shape(self.shapes[self.shape_index])
            self.shape_index = (self.shape_index + 1) % len(self.shapes)
            falling = True
            j = 0
            while falling:
                direction = self.jets[self.jet_index]
                self.jet_index = (self.jet_index + 1) % len(self.jets)
                if direction == '<':
                    self.move_shape(-1,0)
                elif direction == '>':
                    self.move_shape(1, 0)
                falling = self.move_shape(0, -1)
            shape_top = self.bottom_left[1] + len(self.current_shape)
            self.top = max(self.top, shape_top)
        self.floor = self._get_floor()
        return self.top
        
    # Returns (startup, loop_length), where startup is the number of shapes that need
    # to be dropped before it will start looping, and loop_length is the number of
    # shapes that are dropped in each loop
    def get_looping_values(self):
        # key: (jet_index, shape_index, floor), value: (num shapes dropped at that point, top
        # at that point)
        index_pairs = {}
        num = 0
        while not (self.jet_index, self.shape_index, self.floor) in index_pairs:
            index_pairs[(self.jet_index, self.shape_index, self.floor)] = (num, self.top)
            self.drop_shapes(1)
            num += 1
        startup = index_pairs[(self.jet_index, self.shape_index, self.floor)][0]
        loop_length = num - startup
        return (startup, loop_length)
        
    def get_rockstack_height(self, num_drops):
        startup, loop_length = self.get_looping_values()
        self.reset()
        after_startup = num_drops - startup
        num_loops = after_startup // loop_length
        remaining = after_startup % loop_length
        self.drop_shapes(startup)
        startup_height = self.top
        self.drop_shapes(loop_length)
        loop_height = self.top - startup_height
        self.drop_shapes(remaining)
        remaining_height = self.top - (startup_height + loop_height)
        return startup_height + (loop_height * num_loops) + remaining_height
        
        
test_rocktris = Rocktris(test_input)
print(test_rocktris.drop_shapes(2022))
test_2 = Rocktris(test_input)
print(test_2.get_rockstack_height(1000000000000))

full_rocktris = Rocktris(full_input)
print(full_rocktris.drop_shapes(2022))
full_2 = Rocktris(full_input)
print(full_2.get_rockstack_height(1000000000000))