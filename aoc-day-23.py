full_input = """.###....#####.#..###..##..##.######.....##.....#..#.##.#.##..##..#.#.######
####.###...#..#...#......####.#.#..#...####....#...#....###.....###.#..#...
##..#.#...##.##..#.##.#####..#....#...####.#.####.#...###.####..#...#.#....
.#.###.#....##.#.##..#..###......#..#..###....#.##......#..#..#..#.###..##.
...#.###.#.#.#####..##....###.#...###.###..#...#..##........#..#...##.#....
.#.##.##...#.##.#.......###..#.##..#.##..######...##.####.###...#.########.
.####.#.#.#.#...#..#..#####.#.####...#.##.###..#.....###......###...#...#.#
..###.##..#..#.#.....#.##...#....#..##...###.###.#...####.#..#.#.##..##..#.
#.#####..#..##..#...####.####.#..#......##..#####.####.####....###..##..#..
.#.###..#####.#...##..#.#.##.##...####.#.##.#..##...###.#.##.#....##.####..
..##.#..##.#.##.##.#.####..#.#.#####...#......##...#.#..###.#..#...#.####.#
..#...#..#..#.###.###..#.#####..#..#....###...###.##.#...#..#######.##.##.#
#######...#.....#..#...#..#.#.#..##....#..##..##.##.#.#.......###......##.#
.##.###.###.#.##.##..##...#.###.......#..####....##..##.#....###.##...#.###
##...#...#.##..#......##..#..#..##..#..##.#..#.#.#.#######...###.......#...
#..##.#..#.#.#..#.###..##....##.#.#..##.##.#.##.###.##..##.#######....#.#.#
..#....#.##...###.#...#.#######.##....#####.####....####..####.##..###..#..
##........##.#.####..#..##.###.#..#...#..##.#.##.###...#...##.#.#..#..#..##
.##.....##.#..#.#..#....#.#.#####.###..###...##.#.##..##..#####..##.##..##.
#........#.#..###.######..#.##...##.#....#.#.#####.#.#.##..##.#.##..###...#
...#..#..##.##..#.#...#.####..#...###...##.#..#....##.##.#.#..#.###.....##.
.#.#.#.######.#..#######..##.#.#.#..##..###.##.#.##.#..#.##.##...####.##.##
..####....####..#.....##.#.#...##..#.###..#.##.##.####...#.....#..##..###.#
....######.##.###.##.#.###....#.#.#..#...#..##..#...####..#....#....##...##
###.#..#..######.#...###....##...#.##.......##.#.##.#.#......##...#..#..#..
#.#...#.###.#.##.#####.#.##..###.#..#.#.######..#..###...###..#.##....##.##
#.#.....#..#.####.....####..#.#.###.#.....#.###....###.#.#.##..###.##....##
#.#..##.#..###...##..#.##.....###.#.##..#.#....###....##..#..#..#.##....#..
..###...#......##.......##.####..#....#..#....##...##..##.#.#######.#.####.
.####.#.##.#.####...#...#.##....##...#..#..##..###.####.....###......#.##.#
.####.###..#..#...#..####.##.....#....#..#..##......###......#..##.#.##..#.
###.....#.###..######...###.###.#...####.##..#.#.#.##.####.###.#...#.##....
.###.#.##....##.#####.#.......#...#..#......##.######.####.####.###.###..#.
##.##.#..#..###.###.#.#...#.##.#..#.###.##.#.#.###..#.#...##.##.###.#.#...#
#####.#...##.#..##.##...###..#....####..##..##...#.#..##.#.#...##..###.##.#
.#...#..#.#.#.#.#...###.........###..#..##....###.####..#.#.#####.#.#...#.#
..#####.#..#...#.###...###..##......##..##.##....#####..##.####..#....##.#.
#.#.....###.#.#.###.#####.##..######.#.##..########...##.....####....###...
..##.#.#.#..#.#.##.##.#...###....##.#.#....##.####.#.#.#.######.#.#.#.####.
#.##.#....##.#..####......##.#.##.#.#.#########.#.##...###.#........#.#....
....##.#..##.##.##..#.#.####..####.#..####.##.##.#....#..#.#..#####..###...
.##.#....###....###.#..##..####.#.#....####.###.#..#.###...#...#..##.######
.......#.#..##.#..###.#.####..####.##..#.##.####.#.###..#.#.####.#.###...##
####.#.#...##......#..#.##.##.###.####..##...####..#...###...##.###...#...#
#.#......#.#..#.##....##.#.##.#.#..#.#.##.##.#.##...##...#.#.#......#..#.#.
..####.###...##..##.####....##.#.#.#.####..##..#.###.###...####..#.....#..#
..###..#....##.#..####.#..####.##.#####..######.#...###....##.....#..##.#..
####.###.#....###..#...#.#...#..##..#.#...#.##.##.####.##.##.##.##..#..#...
..#.##.....#.#.#.###...#.####.#####.#.#...#.....###....##.#.##..####.#..#..
#..##.####.####.##..##.####.#..##.#....##.#.##..###.###.####.#.##.##...##..
#.#....#..######...##.##......#.#...#####.#.##.#..#####..#..##....#...#.###
.#.#..##.#..##.#...##.#..####.##..#...##..#.#.#..##.####...#.......##..#.##
#.#.#..####.##.#.#......###..##.##..#.#.##.##..##.###.#..####.#..##..###.##
##.##.#......#.#..#.##.#..###.#.#....##..##.#..###..#........###..#.#..#.#.
##..##..###..##.#.####.#..###.....#...####.##...#...##.######.#.#.##.#...#.
.#..##..#...##......####...##.#.##...##.###.#.##..#..###.##.....#...#.##..#
#..#....#...#...#...#..#.#.#..#.####....#.#.#...##.#...#..###..#####.#...#.
.#....#..#.####.#####.#....######....#.#####....#.##.##.#...#.#....#.....#.
#.#####..###.##.#.#..#..#...######...#.###.##.##...##.#.#.#.#.##.##...#..#.
#.#..#.....####.##......##...##..###.#.##.#..#.#.##..#...##.##.##...#...##.
####..##..##.##....##.##.####.....###.#####.###.#####....#####.#.#..##.#.##
##.#..###.#.#.#######..#..##.#..#........#.##.#..#....##...#.####..#.#.....
.#..#.######.#.###.########..#..####.##...#.#.####..##..##.#...##.#...#....
#######...#...###.##.#.#.#....##.#..####.#.##..##.######..#.####..#..#..##.
####.#..#####.......#...###.....##.#.########..#..#####.##.##.##.#.##.#...#
####.#.....#.##.#.#...#####.###.####.####.####....#..#........#######.####.
.#.#..#.#.#.#.##.###...##....##.#.#...#.#..####.#####..##...###.#.##.#..##.
#.##.#.##.#...#..#..#..##....#.##.###...#.#..##....#....###.#..#.#####.#...
.#.##..###.##..#######.#..#.##......###..####..##.##....#...#.#.#...#.###.#
#..#..#.###.##......#...###.#.#..##...##.#..#.#.#.####.#....#.###..####..##
...##.#..#...#.#.#.#...#.#...##.#..##..#...##..#..####.....##..###.#..##...
#.####.##....####.#.#.##.##...###..#......#####.....###....#.###..##...#.##
####..##..#..##..#...###.##..###.##..#.#..###...#...##.#.#..#...#..##.....#
#.##.#.##.#....#.#...##.##...#.##......###...##.#.#...####....#.#...#...#.#
#.#.##...####...##.###.#######.#.##..#.#..###..##.##.##....#.....#..#.#...."""

test_input = """....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#.."""

class Elves:
    ELF = '#'
    EMPTY = '.'
    
    def __init__(self, input_str):
        self.elves = set()
        lines = input_str.split('\n')
        self.top = 0
        self.left = 0
        self.bottom = len(lines) - 1
        self.right = len(lines[0]) - 1
        self.proposed = dict()
        self.directions = ['N','S','W','E']
        for y, line in enumerate(input_str.split('\n')):
            for x, char in enumerate(line):
                if char == self.ELF:
                    self.elves.add((x,y))
    
    def __str__(self):
        result_str = ''
        for y in range(self.top, self.bottom + 1):
            for x in range(self.left, self.right + 1):
                if (x,y) in self.elves:
                    result_str += self.ELF
                else:
                    result_str += self.EMPTY
            result_str += '\n'
        return result_str
        
    def find_edges(self):
        self.top = None
        self.bottom = None
        self.left = None
        self.right = None
        for (x,y) in self.elves:
            if self.left is None or x < self.left:
                self.left = x
            if self.right is None or x > self.right:
                self.right = x
            if self.top is None or y < self.top:
                self.top = y
            if self.bottom is None or y > self.bottom:
                self.bottom = y
        
    def no_elves_around(self, x, y):
        return ((x-1, y-1) not in self.elves and
                (x, y-1) not in self.elves and
                (x+1, y-1) not in self.elves and
                (x-1, y) not in self.elves and
                (x+1, y) not in self.elves and
                (x-1, y+1) not in self.elves and
                (x, y+1) not in self.elves and
                (x+1, y+1) not in self.elves)
                
    def any_elves_together(self):
        for (x, y) in self.elves:
            if not self.no_elves_around(x,y):
                return True
        return False
        
    def can_move_in_dir(self, x, y, direction):
        return ((direction == 'N' 
                    and (x-1, y-1) not in self.elves 
                    and (x,y-1) not in self.elves 
                    and (x+1,y-1) not in self.elves) or
                (direction == 'S' 
                    and (x-1,y+1) not in self.elves 
                    and (x,y+1) not in self.elves 
                    and (x+1,y+1) not in self.elves) or
                (direction == 'W' 
                    and (x-1,y-1) not in self.elves 
                    and (x-1,y) not in self.elves 
                    and (x-1,y+1) not in self.elves) or
                (direction == 'E' 
                    and (x+1,y-1) not in self.elves 
                    and (x+1,y) not in self.elves 
                    and (x+1,y+1) not in self.elves))
                    
    def get_space_in_dir(self, x, y, direction):
        if direction == 'N':
            return (x, y-1)
        elif direction == 'S':
            return (x, y+1)
        elif direction == 'W':
            return (x-1, y)
        elif direction == 'E':
            return (x+1, y)
        else:
            raise Exception(f'Didn\'t recognize direction {direction}')
        
    def propose_moves(self):
        for (x,y) in self.elves:
            if self.no_elves_around(x,y):
                continue
            for direction in self.directions:
                if self.can_move_in_dir(x,y,direction):
                    proposed_space = self.get_space_in_dir(x,y,direction)
                    if proposed_space in self.proposed:
                        self.proposed[proposed_space].append((x,y))
                    else:
                        self.proposed[proposed_space] = [(x,y)]
                    break
    
    def move_to_proposed(self):
        for proposed_space, proposing_spaces in self.proposed.items():
            if len(proposing_spaces) == 1:
                old_space = proposing_spaces[0]
                self.elves.remove(old_space)
                self.elves.add(proposed_space)
        self.proposed = dict()
                
    def rotate_directions(self):
        new_last = self.directions.pop(0)
        self.directions.append(new_last)
        
def part_1(input_str, num_rounds=10, verbose=False):
    elves = Elves(input_str)
    if verbose:
        print(elves) 
    for _ in range(num_rounds):
        elves.propose_moves()
        elves.move_to_proposed()
        elves.rotate_directions()
        if verbose:
            elves.find_edges()
            print(elves)
    elves.find_edges()
    grid_size = (elves.right - elves.left + 1) * (elves.bottom - elves.top + 1)
    return grid_size - len(elves.elves)
    
def part_2(input_str):
    elves = Elves(input_str)
    round = 1
    while elves.any_elves_together():
        round += 1
        elves.propose_moves()
        elves.move_to_proposed()
        elves.rotate_directions()
    return round
                    
        
print(part_1(test_input))
print(part_1(full_input, num_rounds=10, verbose=False))

print(part_2(test_input))
print(part_2(full_input))